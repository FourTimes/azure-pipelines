parameters:
- name: 'state'
  type: string
- name: 'nifi'
  type: string
- name: 'zk'
  type: string
- name: 'repositoryName'
  type: string
- name: 'containerRegistry'
  type: string
- name: 'kubernetesServiceConnection'
  type: string
- name: 'azureSubscription'
  type: string
- name: 'prodAcr'
  type: string

steps:
- ${{ if eq(parameters.state, 'buildAndDeploy') }}:
  - script: |
      echo "docker build and kubernetes deployment Running"
      echo '${{parameters.nifi }}'
      echo '${{parameters.zk }}'
      echo '${{parameters.repositoryName }}'
      echo '${{parameters.containerRegistry }}'
      echo '${{parameters.kubernetesServiceConnection }}'
      echo '${{parameters.azureSubscription }}'
    displayName: run as

    ###############################################
    #                    Nifi                     #
    #               Nifi     Nifi                 #
    #                    Nifi                     #
    ###############################################

  - task: Docker@2
    displayName: Build Docker Image
    inputs:
      command: build
      containerRegistry: ${{ parameters.containerRegistry }}
      repository: ${{ parameters.nifi }}
      Dockerfile: nifi/docker/Dockerfile
      tags: $(Build.BuildNumber)
      arguments: '--no-cache'

  - script: |
      docker run -d --name ${{ parameters.nifi }}  ${{ parameters.repositoryName }}/${{ parameters.nifi }}:$(Build.BuildNumber)
      CID=$(docker ps -q -f status=running -f name=${{ parameters.nifi }})
      if [ ! "${CID}" ]; then
        echo "Container doesn't exist"
        exit 1
      else
        echo "Container Running"
      fi
      unset CID
    displayName: Verify Docker Image Running State

  - script: |
      docker rm $(docker ps -aq --filter name=${{ parameters.nifi }})  -f
    displayName: Delete Running State Container

  - task: Docker@2
    displayName: Push Docker Image to ACR
    inputs:
      command: push
      containerRegistry: ${{ parameters.containerRegistry }}
      repository: ${{ parameters.nifi }}
      tags: $(Build.BuildNumber)

  - script: |
      Size=$(docker image inspect ${{ parameters.repositoryName }}/${{ parameters.nifi }}:$(Build.BuildNumber) --format='{{.Size}}')
      DockerSize=$((($Size/1024)/1024))
      echo "${{ parameters.repositoryName }}/${{ parameters.nifi }}:$(Build.BuildNumber) image size: $DockerSize Mb"
      unset Size
      docker rmi ${{ parameters.repositoryName }}/${{ parameters.nifi }}:$(Build.BuildNumber)
    displayName: Remove Last Build Image

  - script: |
      tag=$(Build.BuildNumber)
      imageNameandversion=${{ parameters.nifi }}:$tag
      repositoryName=${{ parameters.repositoryName }}
      sed -i 's/containerImageName/'"$repositoryName\/$imageNameandversion"'/g' nifi/manifests/nifi.yml
    displayName: Preparing the k8s deployment file

  - task: replacetokens@3
    displayName: Replace values
    inputs:
      rootDirectory: 'nifi'
      targetFiles: 'manifests/nifi-configmap.yml'
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'warn'
      keepToken: false
      tokenPrefix: '@'
      tokenSuffix: '@'
      useLegacyPattern: false
      enableTransforms: false
      enableTelemetry: true

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: nifi/manifests/nifi-configmap.yml
      artifact: drop-nifi-configmap
    displayName: Publish Pipeline Artifact

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: nifi/manifests/nifi.yml  
      artifact: drop-nifi-main
    displayName: Publish Pipeline Artifact

  - task: KubernetesManifest@0
    displayName: kubernetes-deploy
    inputs:
      kubernetesServiceConnection: ${{ parameters.kubernetesServiceConnection }}
      namespace: nifiall
      manifests: nifi/manifests/nifi-configmap.yml

  - task: KubernetesManifest@0
    displayName: kubernetes-deploy
    inputs:
      kubernetesServiceConnection: ${{ parameters.kubernetesServiceConnection }}
      namespace: nifiall
      manifests: nifi/manifests/nifi.yml 

- ${{ if eq(parameters.state, 'Deploy') }}:
  - script: |
      echo "docker build and kubernetes deployment Running"
      echo '${{parameters.nifi }}'
      echo '${{parameters.zk }}'
      echo '${{parameters.repositoryName }}'
      echo '${{parameters.containerRegistry }}'
      echo '${{parameters.azureSubscription }}'
      echo '${{parameters.kubernetesServiceConnection }}'
      echo '${{parameters.prodAcr }}'
    displayName: run as

  - task: replacetokens@3
    displayName: Replace values
    inputs:
      rootDirectory: 'nifi'
      targetFiles: 'manifests/nifi-configmap.yml'
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'warn'
      keepToken: false
      tokenPrefix: '@'
      tokenSuffix: '@'
      useLegacyPattern: false
      enableTransforms: false
      enableTelemetry: true

  - task: AzureCLI@2
    displayName: 'Azure docker registry last upload tag finds'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }} 
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        imageTag=`az acr repository show-tags -n ${{ parameters.prodAcr }} --repository ${{ parameters.nifi }} --orderby time_desc | sed 's/[][]//g' | sed 's/"//g' |cut -f1 -d"," | sed '/^$/d' |  sed 's/[[:space:]]//g' | head -n1` 
        imageNameandversion=${{ parameters.zk }}:$imageTag
        repositoryName=${{ parameters.repositoryName }}
        echo $repositoryName
        echo $imageNameandversion
        sed -i 's/containerImageName/'"$repositoryName\/$imageNameandversion"'/g' nifi/manifests/nifi.yml
        
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: nifi/manifests/nifi-configmap.yml
      artifact: drop-nifi-configmap
    displayName: Publish Pipeline Artifact

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: nifi/manifests/nifi.yml  
      artifact: drop-nifi-main
    displayName: Publish Pipeline Artifact

  - task: KubernetesManifest@0
    displayName: kubernetes-deploy
    inputs:
      kubernetesServiceConnection: ${{ parameters.kubernetesServiceConnection }}
      namespace: nifiall
      manifests: nifi/manifests/nifi-configmap.yml

  - task: KubernetesManifest@0
    displayName: kubernetes-deploy
    inputs:
      kubernetesServiceConnection: ${{ parameters.kubernetesServiceConnection }}
      namespace: nifiall
      manifests: nifi/manifests/nifi.yml        
